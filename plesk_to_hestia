#!/bin/bash
# Sk-Plesk-Migrator  v0.1.5
# By Maksim Usmanov
# Run By Your OWN RISK ALPHA RELEASE
SSHPORT=22 # TODO need fix $RSYNC line40 appers not working with quotes inside
PANEL=hestia
PANELBIN=/usr/local/${PANEL}/bin/
# We will create some dirs there,
# You need have space here
BACKUPDIR=/root/vehe-backup.tmp
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
YELL=$(tput setaf 3)
COLOROFF=$(tput sgr0)
FIX_USER=NO # This chop user to 8 caracteres and remove characters ._-
TIME=$(date +%T)
DATE=$(date +%F)
RSYNC="rsync -av"
REMOTE_MYSQL='/usr/bin/mariadb'


# FUNCTIONS ================================================================================================

HELP () {
    printf "%sERROR:%s This script need min 3 argumets \n" $RED $COLOROFF
    printf "%sINFO:%s bash %s transfer DOMAIN.TLD-OF-PLesk-SUSCRIPTION IP USER \n" $GREEN $COLOROFF $0
    printf "%sINFO:%s USER is the user account in destination server, if leave blank we get plesk suscription user\n"  $GREEN $COLOROFF
}

CHECK_STATUS(){
	STATUS=$1 # STATUS CODE
	FUNC=$2  # WHAT Happen..
	WHAT=$3 # Some times need check if exists and sometimes if not send YES or NO
	if [[ $WHAT == NO ]]; then
		CODE=1
	else
		CODE=0
	fi
	if [[ $STATUS == $CODE ]]; then
		printf "%sINFO:%s No errors for %s \n" $GREEN $COLOROFF $FUNC
	else
		printf "%sERROR:%s in %s \n" $RED $COLOROFF $FUNC
		if [[ $FUNC == CHECK-REMOTE-USER ]] || [[ $FUNC == ADD-REMOTE-USER ]]; then
			printf "%sERROR:%s User %s exists in %s or cant create user. \n" $RED $COLOROFF $USER $IP
			exit 0
		fi
	fi
}

GEN_PASS() {
    LENGTH=10
	PASS=$(tr -dc 'A-Za-z0-9!?%=' < /dev/urandom | head -c $LENGTH)
}

GET_PASSWD() {
	ENCPASSWD=$(plesk db "SELECT accounts.password FROM sys_users LEFT JOIN accounts on sys_users.account_id=accounts.id WHERE login='$1' ORDER BY sys_users.home ASC;" | awk '{ print $2 }' | grep '^\$' )
	
	PLESKKEYHEX=$(cat /etc/psa/private/secret_key | xxd -p | tr -d '\n')
	FTPIVHEX=$(echo "$ENCPASSWD" | awk -F '$' '{ print $3 }' | base64 -d | xxd -p | tr -d '\n')
	FTPENCPASS=$(echo "$ENCPASSWD" | awk -F '$' '{ print $4 }' | tr -d '[:space:]')
	PASS=$(echo $FTPENCPASS | openssl enc -AES-128-CBC -nopad -a -d -K "$PLESKKEYHEX" -iv "$FTPIVHEX" | tr -d '\0')
	#PASS=$(printf "%q" $PASS)
}

HEVE_DB() {
	USER=$1
	FILESIN=$3
	#We can use plesk db directly here
	PLESKDB="mysql -u admin -p$(cat /etc/psa/.psa.shadow) -N -e"
	mkdir -p $BACKUPDIR/${PLESKSUS}/DBS
	#GET List of DBS added in suscription
	DBS=$(plesk db "select db.name as 'Database',d.name as 'Subscription',c.pname as 'Owner',c.login as 'Customer Username' from data_bases db,domains d,clients c where d.cl_id=c.id and db.dom_id=d.id" | awk -v PLESKSUS=$PLESKSUS '$4 == PLESKSUS { print $2 }')
	printf "%sINFO:%s Start Databases Backups\n" $GREEN $COLOROFF
	for DB in $DBS
	do
		printf "%sINFO:%s Dump database: %s\n" $GREEN $COLOROFF $DB
		#BAD NEWS dump -n remove CREATE DATABASE Option but not USE DATABASE
		# So as we need change database name in remote server we need
		# fix that with sed after I not found any option to remove --databases from db dump ( we can use mysqldump directly )
		plesk db dump -n $DB > $BACKUPDIR/${PLESKSUS}/DBS/${USER}_${DB}
		CHECK_STATUS $? "DUMP-DATABASE" "YES"
		sed -i "/^USE.*;$/d" $BACKUPDIR/${PLESKSUS}/DBS/${USER}_${DB}
		# Get user and password for database:
		# SELECT user FROM mysql.db WHERE db = "$DB";
		DBUSER=$($PLESKDB "SELECT user FROM mysql.db WHERE db = '$DB'";)
		# TODO User Count easy to do, irrelevant for usage but good for statistics
		# TODO need manage multiple users, some databases in plesk have more than 1 user, need test
		# to know how hestia can handle it, we can make some for loop for that, for now we restore only first one
		DBUSER=$(echo $DBUSER | awk '{ print $1 }')
		DBPASS=$($PLESKDB "SELECT Password FROM mysql.user where User='$DBUSER'";)
		printf "DB='%s_%s' DBUSER='%s_%s' MD5='%s' HOST='localhost' TYPE='mysql' CHARSET='UTF8' U_DISK='0' SUSPENDED='no' TIME='%s' DATE='%s'\n" "$USER" "$DB" "$USER" "$DBUSER" "$DBPASS" "$TIME" "$DATE" >> "$BACKUPDIR/${PLESKSUS}/DBS/db.conf"
		printf "%s %s %s %s %s\n" "/home/${USER}/web/${PLESKSUS}/public_html" $DB ${USER}_${DB} ${DBUSER} ${USER}_${DBUSER} >> /root/${PLESKSUS}-${PANEL}-DB-Relation-Fix
	done
	
	printf "%sINFO:%s Copy db.conf to remote\n" $GREEN $COLOROFF
	$RSYNC $BACKUPDIR/${PLESKSUS}/DBS/db.conf root@${IP}:/usr/local/${PANEL}/data/users/${USER}/db.conf |
	while read sk_file_dm; do
		echo -en "-- $sk_file_dm\r"
	done
	echo " "
	$SSH ${PANELBIN}v-rebuild-databases $USER
	rm -f $BACKUPDIR/${PLESKSUS}/DBS/db.conf
	printf "%sINFO:%s Trasfering and Restoring databases.\n" $GREEN $COLOROFF
	$SSH mkdir -p /root/tmp_heve_transfer
	CHECK_STATUS $? "CREATE_TMP_DB_DIR_REMOTE" "YES"
	COUNT=0
	for DB in $DBS
	do
		COUNT=$((COUNT + 1))
		printf "%sINFO:%s [%d/%d] Copy %s Database\n" $GREEN $COLOROFF $COUNT $DBSCOUNT $DB
		$RSYNC --progress $BACKUPDIR/${PLESKSUS}/DBS/${USER}_${DB} root@${IP}:/root/tmp_heve_transfer |
		while read sk_file_dm; do
			echo -en "-- $sk_file_dm\r"
		done
		echo " "
		printf "%sINFO:%s Restore %s Database\n" $GREEN $COLOROFF $DB
		# DB=$(echo ${USER}_${DB} ) # fixed problem with ssh import
		$SSH "${REMOTE_MYSQL} ${USER}_${DB}  < /root/tmp_heve_transfer/${USER}_${DB} "
		CHECK_STATUS $? "RESTORE_DATABASE" "YES"
		$SSH rm -f /root/tmp_heve_transfer/${USER}_${DB}
	done
	# Need extra rebuild, investigating why with first one password not working
	$SSH ${PANELBIN}v-rebuild-databases $USER
	#### TODO fix most common CMS configuration files..
	printf "%sINFO:%s Transfer DB Relation Files to %s \n" $GREEN $COLOROFF $IP
	$RSYNC /root/${PLESKSUS}-${PANEL}-DB-Relation-Fix root@${IP}:/root |
	while read sk_file_dm; do
		echo -en "-- $sk_file_dm\r"
	done
	echo " "
	
	printf "%sWARN:%s DBS migrated, please run in %s:\n" $YELL $COLOROFF $IP
	printf "%sWARN:%s bash fix-db-relation %s\n" $YELL $COLOROFF "/root/${PLESKSUS}-${PANEL}-DB-Relation-Fix"
	printf "%sWARN:%s This will FIX database name and user in most common CMS" $YELL $COLOROFF
	echo ""
}

HEVE_MAIL() {
	MAILSIN=/var/qmail/mailnames/
	EMAILS=$(plesk db "select concat(m.mail_name,'@',d.name) as mail, a.password from domains d, mail m, accounts a where m.dom_id=d.id and m.account_id=a.id and d.name='$PLESKSUS';" | grep "@" | awk '{ print $2"|"$4 }' | sed 's/||/|/g')
	ARREMAILS=( $( echo "$EMAILS" ) )
	PLESKKEYHEX=$(cat /etc/psa/private/secret_key | xxd -p | tr -d '\n')
	printf "\n%sINFO:%s Start with eMail accounts\n" $GREEN $COLOROFF
	COUNT=0
	
	for LINEEMAIL in "${ARREMAILS[@]}";
	do
		COUNT=$((COUNT + 1))
		EMAIL=$(echo $LINEEMAIL | awk -F '|' '{ print $1 }' | tr -d '[:space:]')
		USERMAIL=$(echo $EMAIL | awk -F '@' '{ print $1 }' | tr -d '[:space:]')
		EMAILPASSSTR=$(echo $LINEEMAIL | awk -F '|' '{ print $2 }' | tr -d '[:space:]')
		
		printf "%sINFO:%s Creating [%d/%d] : %s\n" $GREEN $COLOROFF $COUNT $EMAILSCOUNT $EMAIL
		
		if [ -z "${EMAILPASSSTR}" ]; then
			GEN_PASS
			printf "%sWARN:%s with random pass: %s\n" $YELL $COLOROFF $PASS
			$SSH "${PANELBIN}v-add-mail-account $USER $PLESKSUS $USERMAIL $PASS"
			CHECK_STATUS $? "CREATE-EMAIL-ACCOUNT" "YES"
		else
			EMAILENCPASS=$(echo $EMAILPASSSTR | awk -F '$' '{ print $4 }' | tr -d '[:space:]')
			EMAILIVHEX=$(echo $EMAILPASSSTR | awk -F '$' '{ print $3 }' | base64 -d | xxd -p | tr -d '\n')
			EMAILPASS=$(echo $EMAILENCPASS | openssl enc -AES-128-CBC -nopad -a -d -K "$PLESKKEYHEX" -iv "$EMAILIVHEX" | tr -d '\0')
			printf "%sWARN:%s with pass: %s\n" $YELL $COLOROFF $EMAILPASS
			$SSH "${PANELBIN}v-add-mail-account $USER $PLESKSUS $USERMAIL '$EMAILPASS'"
			CHECK_STATUS $? "CREATE-EMAIL-ACCOUNT" "YES"
		fi
		
		EMAILFORWARD=$(plesk bin mail --info $EMAIL | grep "^Group member" | awk '{ print $3 }')
		if [ ! -z "${EMAILFORWARD}" ]; then
			printf "%sINFO:%s Creating email forward: %s -> %s\n" $GREEN $COLOROFF $EMAIL $EMAILFORWARD
			$SSH "${PANELBIN}v-add-mail-account-forward $USER $PLESKSUS $USERMAIL $EMAILFORWARD"
			CHECK_STATUS $? "CREATE-EMAIL-ACCOUNT" "YES"
		fi
		
		EMAILMAILBOX=$(plesk bin mail --info $EMAIL | grep "^Mailbox" | awk '{ print $2 }')
		if [ "${EMAILMAILBOX}" == "true" ]; then
			printf "%sINFO:%s Sync Maildir %s@%s\n" $GREEN $COLOROFF $USERMAIL $PLESKSUS
			$RSYNC ${MAILSIN}${PLESKSUS}/${USERMAIL}/Maildir/ root@${IP}:/home/${USER}/mail/${PLESKSUS}/${USERMAIL}/ 2>&1 |
			while read sk_file_dm; do
				sk_sync=$((sk_sync+1))
				echo -en "      -- $sk_sync restored mails\r"
			done
			echo " "
			
			EMAILFILTERS=${MAILSIN}${PLESKSUS}/${USERMAIL}/.dovecot.sieve
			if [ -f $EMAILFILTERS ]; then
				
				printf "%sINFO:%s Sync email filters\n" $GREEN $COLOROFF
				$SSH "mkdir /home/${USER}/mail/${PLESKSUS}/${USERMAIL}/sieve"
				echo "require [\"fileinto\"];" > managesieve.sieve
				cat $EMAILFILTERS | grep -v -e '^# Sieve Filter' | grep -v -e 'www.horde.org' | grep -v -e '^require' | sed -E "s/^# (.*)/# rule:[\1]/g" | sed "s/INBOX.//g" >> managesieve.sieve
				chmod 600 managesieve.sieve
				$RSYNC managesieve.sieve root@${IP}:/home/${USER}/mail/${PLESKSUS}/${USERMAIL}/sieve 2>&1 |
				while read sk_file_dm; do
					echo -en "      -- restored mail filters\r"
				done
				echo " "
				$SSH "chmod 700 /home/${USER}/mail/${PLESKSUS}/${USERMAIL}/sieve"
				$SSH "cd /home/${USER}/mail/${PLESKSUS}/${USERMAIL} && ln -s sieve/managesieve.sieve dovecot.sieve"
				rm managesieve.sieve
				
			fi
			$SSH "chown ${USER}:mail /home/${USER}/mail/${PLESKSUS}/${USERMAIL}/ -R"
		fi
		
	done
	
	echo ""
}

HEVE_DOMAIN(){
	#printf "%sINFO:%s Start with websites\n" $GREEN $COLOROFF
	printf "%sINFO:%s Adding domain %s in remote server\n" $GREEN $COLOROFF $PLESKSUS
	$SSH ${PANELBIN}v-add-domain $USER $PLESKSUS
	CHECK_STATUS $? "ADD-REMOTE-DOMAIN" "YES"
	printf "%sINFO:%s Copy Files from %s \n" $GREEN $COLOROFF $FILESIN
	$RSYNC $FILESIN/ root@${IP}:/home/${USER}/web/${PLESKSUS}/public_html 2>&1 |
	while read sk_file_dm; do
		sk_sync=$((sk_sync+1))
		printf "\r%sINFO:%s Importing -- %s files"  "$GREEN" "$COLOROFF" "$sk_sync"
	done
	$SSH "chown ${USER}:${USER} /home/${USER}/web/${PLESKSUS}/public_html/* -R"
	$SSH "chown ${USER}:${USER} /home/${USER}/web/${PLESKSUS}/public_html/.* -R"
	$SSH "chown ${USER}:www-data /home/${USER}/web/${PLESKSUS}/public_html"
	printf "\n"
}

HEVE_GIT(){
	
	printf "%sINFO:%s Found git directory: %s\n" $GREEN $COLOROFF "$FILESIN/../git"
	
	$SSH "mkdir /home/${USER}/web/${PLESKSUS}/git"
	printf "%sINFO:%s Created remote git directory: %s\n" $GREEN $COLOROFF "/home/$USER/web/$PLESKSUS/git"
	
	$RSYNC $FILESIN/../git/ root@${IP}:/home/${USER}/web/${PLESKSUS}/git 2>&1 |
	while read sk_file_dm; do
		sk_sync=$((sk_sync+1))
		printf "\r%sINFO:%s Importing git -- %s files"  "$GREEN" "$COLOROFF" "$sk_sync"
	done
	$SSH "chown ${USER}:${USER} /home/${USER}/web/${PLESKSUS}/git -R"
	printf "\n"
	
}

HEVE_SUBS() {
	USER=$1
	DOMAIN=$2
	printf "%sINFO:%s Looking for subdomains\n" $GREEN $COLOROFF
	SUBSNUM=$(plesk bin subdomain -l |grep .$DOMAIN | wc -l )
	
	if [ $SUBSNUM -gt 0 ]; then
		
		printf "%sINFO:%s subdomains found: %d \n" $GREEN $COLOROFF $SUBSNUM
		SUBS=$(plesk bin subdomain -l |grep .$DOMAIN )
		COUNT=0
		
		for SUB in $SUBS
		do
			COUNT=$((COUNT + 1))
			printf "%sINFO:%s [%d/%d] Get some information from: %s\n" $GREEN $COLOROFF $COUNT $SUBSNUM $SUB
			PLESKSUB=$(plesk bin subscription -l | grep $SUB)
			
			if [[ ! -z "$PLESKSUB" ]]; then
				printf "%sWARN:%s Subdomain %s is also a subscription, SKIP... Subscriptions have to be migrated independently \n" $YELL $COLOROFF $SUB
			else
				FILESIN=$(plesk bin subscription --info $SUB |awk ' $1 == "--WWW-Root--:" { print $2 }')
				PLESKSUS=$SUB
				HEVE_DOMAIN $USER $PLESKSUS
			fi
		done
	
	else
		printf "%sINFO:%s No subdomains found\n" $GREEN $COLOROFF
	fi
	
	echo ""
}

FIX_USER(){
	USER=$1
	if [[ $USER =~ [._-] ]]; then
		printf "%s User %s is in valid, will fix it\n" $RED $COLOROFF $USER
		USER=$(echo "$USER" | tr -d '.-_' | cut -c 1-8)
		printf "%sINFO:%s NEW USER is %s is in valid, will fix it\n" $GREEN $COLOROFF $USER
	else
		printf "%sINFO:%s User %s is valid\n" $GREEN $COLOROFF $USER
	fi
	echo ""
}

TRANSFER () {
	SUBEXIST=$(plesk bin subscription --list | grep -w $PLESKSUS | wc -l)
	if [ $SUBEXIST -ne 1 ] ; then
		printf "%sERROR:%s subscription %s not found in this server \n" $RED $COLOROFF $PLESKSUS
		exit 2
	else
		TITLE="| DOMAIN TO TRANSFER: $PLESKSUS |"
		EDGE=$(echo "$TITLE" | sed 's/./-/g')
		echo "$EDGE"
		echo "$TITLE"
		echo "$EDGE"
	fi
	printf "%sINFO:%s Get some information from plesk\n" $GREEN $COLOROFF
	#Get document root
	FILESIN=$(plesk bin subscription --info $PLESKSUS |awk ' $1 == "--WWW-Root--:" { print $2 }')
	printf "%sINFO:%s We will backup files of %s from %s\n" $GREEN $COLOROFF $PLESKSUS $FILESIN
	
	printf "%sINFO:%s CHECK FOR DATABASES.\n" $GREEN $COLOROFF
	DBSCOUNT=$(plesk bin subscription --info $PLESKSUS |grep -A2 Databases | awk '$1 == "Total" { print $3 }')
	#Get database list created in subscription
	
	printf "%sINFO:%s FOUND %s databases in %s subscription\n" $GREEN $COLOROFF $DBSCOUNT $PLESKSUS
	
	printf "%sINFO:%s CHECK FOR EMAILS.\n" $GREEN $COLOROFF
	#Get Mail accounts from domain
	#EMAILSCOUNT=$(plesk bin subscription --info $PLESKSUS |awk ' $1 == "Mailboxes:" { print $2 }')
	EMAILSCOUNT=$(plesk db "select concat(m.mail_name,'@',d.name) as mail, a.password from domains d, mail m, accounts a where m.dom_id=d.id and m.account_id=a.id and d.name='$PLESKSUS';" | grep "@" | wc -l)
	printf "%sINFO:%s FOUND %s emails accounts in %s\n" $GREEN $COLOROFF $EMAILSCOUNT $PLESKSUS
	MAILMAN=$(plesk bin subscription --info $PLESKSUS |grep "Mailing list service:" | awk '{ print $4 }')
	if [[ $MAILMAN == On ]]; then
		printf "%sWARN%s detect this account have MAILMAN enabled, this not be copied\n" $YELL $COLOROFF
	fi
	if [[ $USER =~ pleskuser ]]; then
		USER=$(plesk bin subscription --info $PLESKSUS |grep "FTP Login:" | awk '{ print $3 }')
		printf "%sINFO:%s SysUser for %s is %s\n" $GREEN $COLOROFF $PLESKSUS $USER
		if [[ $FIXUSER =~ ^[Yy][Ee][Ss]$ ]]; then
			FIX_USER $USER
		fi
		printf "%sINFO:%s Check if %s exist in %s\n" $GREEN $COLOROFF $USER $IP
		$SSH grep -w $USER /etc/passwd
		CHECK_STATUS $? "CHECK-REMOTE-USER" "NO"
	fi
	printf "%sINFO:%s Add user %s in %s \n"  $GREEN $COLOROFF $USER $IP
	## TODO Ask for email user
	# TODO Get suscription password for now get aleatory
	#GEN_PASS
	GET_PASSWD $USER
	printf "%sWARN:%s FTP user: %s | FTP password: %s\n" $YELL $COLOROFF $USER $PASS
	$SSH ${PANELBIN}v-add-user $USER "$(printf "%q" $PASS)" "admin@${PLESKSUS}"
	CHECK_STATUS $? "ADD-REMOTE-USER" "yes"
	
	HEVE_DOMAIN $USER $PLESKSUS
	
	if [[ -d "$FILESIN/../git" ]]; then
		HEVE_GIT $FILESIN $PLESKSUS
	fi
	
	if [[ $DBSCOUNT -gt 0 ]]; then
		HEVE_DB $USER $PLESKSUS $FILESIN
	else
		printf "%sWARN:%s No DBS found for %s, skip...\n" $YELL $COLOROFF $PLESKSUS
	fi
	
	if [[ $EMAILSCOUNT -gt 0 ]]; then
		HEVE_MAIL
	else
		printf "%sWARN:%s No eMails found for %s, skip...\n" $YELL $COLOROFF $PLESKSUS
	fi
	
	HEVE_SUBS $USER $PLESKSUS
	
	if test -f /root/${PLESKSUS}-${PANEL}-DB-Relation-Fix; then
	
		printf "%sTransfer DB Relation Files to %s %s\n" $YELL $IP $COLOROFF
		$RSYNC /root/${PLESKSUS}-${PANEL}-DB-Relation-Fix root@${IP}:/root |
		while read sk_file_dm; do
			echo -en "\r"
		done
		echo " "
		
		printf "%s###################\n" $RED
		printf "DBS migrated, please run fix-db-relation in %s: bash fix-db-relation %s\n" $IP "/root/${PLESKSUS}-${PANEL}-DB-Relation-Fix"
		printf "This will FIX database name and user in most common CMS\n"
		printf "################### %s\n" $COLOROFF
		echo " "
	
	fi
	
	# UPDATE USED DISK SPACE
	$SSH ${PANELBIN}v-update-sys-queue disk
}


# MAIN PROGRAM ================================================================================================

if [[ $# -lt 3 ]]; then
    HELP
fi
if [[ $1 == transfer ]] && [[ ! -e /etc/psa/.psa.shadow ]]; then
    # TODO Need extra check plesk compatibilidaty may not works in v12 ( grep /usr/local/psa/version and check version)
    printf "%sERROR:%s Transfer only suported inside plesk server v17+ \n" $RED $COLOROFF
fi
PLESKSUS=$2
IP=$3
USER=${4:-pleskuser}
SSH="ssh -p $SSHPORT -oStrictHostKeyChecking=no -oConnectTimeout=10 -oBatchMode=yes root@${IP}"

if [[ ! -d "$BACKUPDIR" ]]; then
    mkdir -p "BACKUPDIR"
fi

# TODO FIX this, works but was original idea
if [[ $1 == transfer ]];then
    TRANSFER $PLESKSUS
elif [[ $1 == restore ]]; then
    RESTORE $USER
else
    HELP
fi
